book_by_genre = bestreads %>% group_by(MainGenre) %>% mutate (linenumber = row_number()) %>%  ungroup()
View(book_by_genre)
tidy_books = book_by_genre %>% unnest_tokens(word, Reviews)
View(tidy_books)
data("stop_words")
tidy_books = tidy_books %>%
anti_join(stop_words)
View(tidy_books)
tidy_books %>%
count(word, sort = TRUE)
bing = sentiments %>%
filter(lexicon == "bing") %>%
select(-score)
bing
bestreads_sentiment = tidy_books %>%
inner_join(bing) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
View(bestreads_sentiment)
bestreads_sentiment = tidy_books %>%
inner_join(bing) %>%
count(gender, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
View(bestreads_sentiment)
bestreads_sentiment = tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
View(bestreads_sentiment)
install.packages('tidyr')
library(tidyr)
bestreads_sentiment = tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
View(bestreads_sentiment)
library(readr)
bestreads_sentiment = tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
View(bestreads_sentiment)
library(dplyr)
bestreads_sentiment = tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
View(bestreads_sentiment)
tidy_books %>% group_by(MainGenre) %>%
count(word, sort = TRUE)
install.packages('viridis')
library(ggplot2)
library(viridis)
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x") +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank())
library(ggplot2)
library(viridis)
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~MainGenre, ncol = 2, scales = "free_x") +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank())
library(ggplot2)
library(viridis)
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~MainGenre, ncol = 2, scales = "free_x") +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
# scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
# scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank())
ggplot(bestreads_sentiment, aes(MainGenre, sentiment)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~MainGenre, ncol = 2, scales = "free_x") +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
# scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
# scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank())
ggplot(bestreads_sentiment, aes(MainGenre, sentiment)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment")
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
# scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
# scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank())
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity") +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank())
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity") +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank()) +
theme_pander()
library(ggthemes)
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity") +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(axis.text.x=element_blank()) +
theme_pander()
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
# theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
# theme(axis.text.x=element_blank()) +
theme_pander()
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=1)) +
theme(strip.text = element_text(face = "italic")) +
# theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
# theme(axis.text.x=element_blank()) +
theme_pander()
ggplot(bestreads_sentiment, aes(MainGenre, sentiment, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal(base_size = 13) +
labs(title = "Sentiment in Top 500 Books",
y = "Sentiment") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment)
tidy_books
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, NumberOfReviews) %>%
spread(sentiment, n, fill = 0)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews)
tidy_books %>%
inner_join(bing) %>% group_by(MainGenre) %>% count(word)
tidy_books %>%
inner_join(bing) %>% group_by(MainGenre) %>% summarize(sum(word))
tidy_books %>%
inner_join(bing) %>% group_by(MainGenre) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
tidy_books %>%
inner_join(bing) %>% group_by(MainGenre) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
spread(sentiment, n, fill = 0) %>% group_by(MainGenre, sentiment) %>% summarize(sum(n))
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
spread(sentiment, n, fill = 0) %>%
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
spread(sentiment, n, fill = 0)
tidy_books %>%
inner_join(bing) %>% group_by(MainGenre) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
spread(sentiment, n, fill = 0) %>% group_by(MainGenre, positive)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, NumberOfReviews) %>%
spread(sentiment, n, fill = 0) %>% count(word)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, NumberOfReviews) %>%
spread(sentiment, n, fill = 0)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
spread(sentiment, n, fill = 0)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
spread(sentiment, n, fill = 0) %>%
count(word) %>%
group_by(MainGenre, positive) %>%
summarize(sum(n))
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
spread(sentiment, n, fill = 0) %>%
count(word)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment==positive)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive')
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(word) %>%
group_by(MainGenre) %>%
summarize(sum(n))
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(word) %>%
group_by(MainGenre)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(word) %>%
group_by(MainGenre) %>%
summarize(sum(nn))
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(word) %>%
group_by(MainGenre)
tidy_books %>% count(word) %>% group_by(MainGenre) %>%
summarize(sum_words = sum(n))
tidy_books %>% count(word)
tidy_books %>% count(word, MainGenre) %>% group_by(MainGenre) %>%
summarize(sum_words = sum(n))
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive')
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive')
group_by(MainGenre)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(sentiment) %>%
group_by(MainGenre)
tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(sentiment) %>%
group_by(MainGenre) %>%
summarize(sum_positivesentiment = sum(nn))
reviews_words = tidy_books %>% count(word, MainGenre) %>% group_by(MainGenre) %>%
summarize(sum_words = sum(n))
bestreads_sentiment_2 = tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(sentiment) %>%
group_by(MainGenre) %>%
summarize(sum_positivesentiment = sum(nn)) %>%
inner_join(reviews_words) %>%
mutate(ratio_positive = sum_positivesentiment / sum_words)
bestreads_sentiment_2
bestreads_sentiment_2 = tidy_books %>%
inner_join(bing) %>%
count(MainGenre, index = linenumber %/% 80, sentiment, word, NumberOfReviews) %>%
filter(sentiment== 'positive') %>%
count(sentiment) %>%
group_by(MainGenre) %>%
summarize(sum_positivesentiment = sum(nn)) %>%
inner_join(reviews_words) %>%
mutate(ratio_positive = (sum_positivesentiment / sum_words)*100)
bestreads_sentiment_2
ggplot(bestreads_sentiment_2, aes(MainGenre, ratio_positive, fill = MainGenre)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_minimal(base_size = 13) +
labs(title = "Ratio positive words to total words in Top 500 Books",
y = "Positive words to total words ratio") +
scale_fill_viridis(end = 0.75, discrete=TRUE, direction = -1) +
scale_x_discrete(expand=c(0.02,0)) +
theme(strip.text=element_text(hjust=0)) +
theme(strip.text = element_text(face = "italic")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# theme(axis.title.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme_pander()
bestreads %>%
group_by(MainGenre) %>%
unnest_tokens(sentence, Reviews, token = "sentences") %>%
ungroup()
library(tm)
library(wordcloud)
library(SnowballC)
library(ggplot2)
library(ggthemes)
library(stringr)
library(jsonlite)
library(readr)
library(dplyr)
library(tidytext)
library(tidyr)
bestreads %>%
group_by(MainGenre) %>%
unnest_tokens(sentence, Reviews, token = "sentences") %>%
ungroup()
library(tidytext)
bestreads_sentences <- bestreads %>%
group_by(MainGenre) %>%
unnest_tokens(sentence, Reviews, token = "sentences") %>%
ungroup()
View(bestreads_sentences)
bingnegative = sentiments %>%
filter(lexicon == "bing", sentiment == "negative")
tidy_books
sentiments %>%
filter(lexicon == "bing", sentiment == "negative")
tidy_books %>%
group_by(MainGenre, Reviews) %>%
summarize(words = n())
View(tidy_books)
wordcounts = tidy_books %>% group_by(MainGenre) %>%
count(word, sort = TRUE)
tidy_books %>%
semi_join(bingnegative) %>%
group_by(MainGenre) %>%
summarize(negativewords = n()) %>%
left_join(wordcounts, by = "MainGenre") %>%
mutate(ratio = negativewords/words) %>%
filter(chapter != 0) %>%
top_n(1)
tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words  %>%
pair_count(linenumber, word, sort = TRUE)
tidy_books %>%
filter(MainGenre == "Classics")
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pair_count(linenumber, word, sort = TRUE)
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count(linenumber, word, sort = TRUE)
install.packages("widyr")
library(devtools)
install_github("dgrtwo/widyr")
install.packages('devtools')
library(devtools)
install_github("dgrtwo/widyr")
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count(linenumber, word, sort = TRUE)
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pair_count(linenumber, word, sort = TRUE)
?pairwise_count
??pairwise_count
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count_(linenumber, word, sort = TRUE)
library(widyr)
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count_(linenumber, word, sort = TRUE)
classics_words
View(classics_words)
library(widyr)
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count_(ranking, word, sort = TRUE)
library(widyr)
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count_(linenumber, word, sort = TRUE)
library(widyr)
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count(linenumber, word, sort = TRUE)
install.packages('igraph')
install.packages('ggraph')
library(ggraph)
library(igraph)
set.seed(1813)
word_cooccurences %>%
filter(n >= 10) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n)) +
geom_node_point(color = "darkslategray4", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8) +
ggtitle(expression(paste("Word Network in Genre ",
italic("Classics")))) +
theme_void()
set.seed(1813)
word_cooccurences %>%
filter(n >= 1000) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n)) +
geom_node_point(color = "darkslategray4", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8) +
ggtitle(expression(paste("Word Network in Genre ",
italic("Classics")))) +
theme_void()
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count(word, linenumber, sort = TRUE)
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count(word, linenumber, sort = TRUE)
word_cooccurences
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count(linenumber, wordsort = TRUE)
word_cooccurences
classics_words = tidy_books %>%
filter(MainGenre == "Classics")
word_cooccurences = classics_words %>%
pairwise_count(linenumber, word, sort = TRUE)
word_cooccurences
